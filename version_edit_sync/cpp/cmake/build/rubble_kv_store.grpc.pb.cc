// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rubble_kv_store.proto

#include "rubble_kv_store.pb.h"
#include "rubble_kv_store.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace rubble {

static const char* RubbleKvStoreService_method_names[] = {
  "/rubble.RubbleKvStoreService/Sync",
  "/rubble.RubbleKvStoreService/Put",
  "/rubble.RubbleKvStoreService/Get",
};

std::unique_ptr< RubbleKvStoreService::Stub> RubbleKvStoreService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RubbleKvStoreService::Stub> stub(new RubbleKvStoreService::Stub(channel));
  return stub;
}

RubbleKvStoreService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Sync_(RubbleKvStoreService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Put_(RubbleKvStoreService_method_names[1], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_Get_(RubbleKvStoreService_method_names[2], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status RubbleKvStoreService::Stub::Sync(::grpc::ClientContext* context, const ::rubble::SyncRequest& request, ::rubble::SyncReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rubble::SyncRequest, ::rubble::SyncReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Sync_, context, request, response);
}

void RubbleKvStoreService::Stub::experimental_async::Sync(::grpc::ClientContext* context, const ::rubble::SyncRequest* request, ::rubble::SyncReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rubble::SyncRequest, ::rubble::SyncReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Sync_, context, request, response, std::move(f));
}

void RubbleKvStoreService::Stub::experimental_async::Sync(::grpc::ClientContext* context, const ::rubble::SyncRequest* request, ::rubble::SyncReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Sync_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rubble::SyncReply>* RubbleKvStoreService::Stub::PrepareAsyncSyncRaw(::grpc::ClientContext* context, const ::rubble::SyncRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rubble::SyncReply, ::rubble::SyncRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Sync_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rubble::SyncReply>* RubbleKvStoreService::Stub::AsyncSyncRaw(::grpc::ClientContext* context, const ::rubble::SyncRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSyncRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::rubble::PutRequest, ::rubble::PutReply>* RubbleKvStoreService::Stub::PutRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::rubble::PutRequest, ::rubble::PutReply>::Create(channel_.get(), rpcmethod_Put_, context);
}

void RubbleKvStoreService::Stub::experimental_async::Put(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::rubble::PutRequest,::rubble::PutReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::rubble::PutRequest,::rubble::PutReply>::Create(stub_->channel_.get(), stub_->rpcmethod_Put_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::rubble::PutRequest, ::rubble::PutReply>* RubbleKvStoreService::Stub::AsyncPutRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::rubble::PutRequest, ::rubble::PutReply>::Create(channel_.get(), cq, rpcmethod_Put_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::rubble::PutRequest, ::rubble::PutReply>* RubbleKvStoreService::Stub::PrepareAsyncPutRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::rubble::PutRequest, ::rubble::PutReply>::Create(channel_.get(), cq, rpcmethod_Put_, context, false, nullptr);
}

::grpc::ClientReaderWriter< ::rubble::GetRequest, ::rubble::GetReply>* RubbleKvStoreService::Stub::GetRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::rubble::GetRequest, ::rubble::GetReply>::Create(channel_.get(), rpcmethod_Get_, context);
}

void RubbleKvStoreService::Stub::experimental_async::Get(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::rubble::GetRequest,::rubble::GetReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::rubble::GetRequest,::rubble::GetReply>::Create(stub_->channel_.get(), stub_->rpcmethod_Get_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::rubble::GetRequest, ::rubble::GetReply>* RubbleKvStoreService::Stub::AsyncGetRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::rubble::GetRequest, ::rubble::GetReply>::Create(channel_.get(), cq, rpcmethod_Get_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::rubble::GetRequest, ::rubble::GetReply>* RubbleKvStoreService::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::rubble::GetRequest, ::rubble::GetReply>::Create(channel_.get(), cq, rpcmethod_Get_, context, false, nullptr);
}

RubbleKvStoreService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RubbleKvStoreService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RubbleKvStoreService::Service, ::rubble::SyncRequest, ::rubble::SyncReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RubbleKvStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rubble::SyncRequest* req,
             ::rubble::SyncReply* resp) {
               return service->Sync(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RubbleKvStoreService_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< RubbleKvStoreService::Service, ::rubble::PutRequest, ::rubble::PutReply>(
          [](RubbleKvStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::rubble::PutReply,
             ::rubble::PutRequest>* stream) {
               return service->Put(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RubbleKvStoreService_method_names[2],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< RubbleKvStoreService::Service, ::rubble::GetRequest, ::rubble::GetReply>(
          [](RubbleKvStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::rubble::GetReply,
             ::rubble::GetRequest>* stream) {
               return service->Get(ctx, stream);
             }, this)));
}

RubbleKvStoreService::Service::~Service() {
}

::grpc::Status RubbleKvStoreService::Service::Sync(::grpc::ServerContext* context, const ::rubble::SyncRequest* request, ::rubble::SyncReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RubbleKvStoreService::Service::Put(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::rubble::PutReply, ::rubble::PutRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RubbleKvStoreService::Service::Get(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::rubble::GetReply, ::rubble::GetRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace rubble

