// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: version_edit_sync.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_version_5fedit_5fsync_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_version_5fedit_5fsync_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_version_5fedit_5fsync_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_version_5fedit_5fsync_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_version_5fedit_5fsync_2eproto;
namespace version_edit_sync {
class DeleteFile;
class DeleteFileDefaultTypeInternal;
extern DeleteFileDefaultTypeInternal _DeleteFile_default_instance_;
class GetReply;
class GetReplyDefaultTypeInternal;
extern GetReplyDefaultTypeInternal _GetReply_default_instance_;
class GetRequest;
class GetRequestDefaultTypeInternal;
extern GetRequestDefaultTypeInternal _GetRequest_default_instance_;
class NewFile;
class NewFileDefaultTypeInternal;
extern NewFileDefaultTypeInternal _NewFile_default_instance_;
class NewFile_FileMetaData;
class NewFile_FileMetaDataDefaultTypeInternal;
extern NewFile_FileMetaDataDefaultTypeInternal _NewFile_FileMetaData_default_instance_;
class NewFile_FileMetaData_FileDescriptor;
class NewFile_FileMetaData_FileDescriptorDefaultTypeInternal;
extern NewFile_FileMetaData_FileDescriptorDefaultTypeInternal _NewFile_FileMetaData_FileDescriptor_default_instance_;
class PutReply;
class PutReplyDefaultTypeInternal;
extern PutReplyDefaultTypeInternal _PutReply_default_instance_;
class PutRequest;
class PutRequestDefaultTypeInternal;
extern PutRequestDefaultTypeInternal _PutRequest_default_instance_;
class VersionEditSyncReply;
class VersionEditSyncReplyDefaultTypeInternal;
extern VersionEditSyncReplyDefaultTypeInternal _VersionEditSyncReply_default_instance_;
class VersionEditSyncRequest;
class VersionEditSyncRequestDefaultTypeInternal;
extern VersionEditSyncRequestDefaultTypeInternal _VersionEditSyncRequest_default_instance_;
class VersionEditToSync;
class VersionEditToSyncDefaultTypeInternal;
extern VersionEditToSyncDefaultTypeInternal _VersionEditToSync_default_instance_;
}  // namespace version_edit_sync
PROTOBUF_NAMESPACE_OPEN
template<> ::version_edit_sync::DeleteFile* Arena::CreateMaybeMessage<::version_edit_sync::DeleteFile>(Arena*);
template<> ::version_edit_sync::GetReply* Arena::CreateMaybeMessage<::version_edit_sync::GetReply>(Arena*);
template<> ::version_edit_sync::GetRequest* Arena::CreateMaybeMessage<::version_edit_sync::GetRequest>(Arena*);
template<> ::version_edit_sync::NewFile* Arena::CreateMaybeMessage<::version_edit_sync::NewFile>(Arena*);
template<> ::version_edit_sync::NewFile_FileMetaData* Arena::CreateMaybeMessage<::version_edit_sync::NewFile_FileMetaData>(Arena*);
template<> ::version_edit_sync::NewFile_FileMetaData_FileDescriptor* Arena::CreateMaybeMessage<::version_edit_sync::NewFile_FileMetaData_FileDescriptor>(Arena*);
template<> ::version_edit_sync::PutReply* Arena::CreateMaybeMessage<::version_edit_sync::PutReply>(Arena*);
template<> ::version_edit_sync::PutRequest* Arena::CreateMaybeMessage<::version_edit_sync::PutRequest>(Arena*);
template<> ::version_edit_sync::VersionEditSyncReply* Arena::CreateMaybeMessage<::version_edit_sync::VersionEditSyncReply>(Arena*);
template<> ::version_edit_sync::VersionEditSyncRequest* Arena::CreateMaybeMessage<::version_edit_sync::VersionEditSyncRequest>(Arena*);
template<> ::version_edit_sync::VersionEditToSync* Arena::CreateMaybeMessage<::version_edit_sync::VersionEditToSync>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace version_edit_sync {

// ===================================================================

class VersionEditSyncRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:version_edit_sync.VersionEditSyncRequest) */ {
 public:
  inline VersionEditSyncRequest() : VersionEditSyncRequest(nullptr) {}
  virtual ~VersionEditSyncRequest();

  VersionEditSyncRequest(const VersionEditSyncRequest& from);
  VersionEditSyncRequest(VersionEditSyncRequest&& from) noexcept
    : VersionEditSyncRequest() {
    *this = ::std::move(from);
  }

  inline VersionEditSyncRequest& operator=(const VersionEditSyncRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionEditSyncRequest& operator=(VersionEditSyncRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VersionEditSyncRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VersionEditSyncRequest* internal_default_instance() {
    return reinterpret_cast<const VersionEditSyncRequest*>(
               &_VersionEditSyncRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VersionEditSyncRequest& a, VersionEditSyncRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionEditSyncRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionEditSyncRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VersionEditSyncRequest* New() const final {
    return CreateMaybeMessage<VersionEditSyncRequest>(nullptr);
  }

  VersionEditSyncRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VersionEditSyncRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VersionEditSyncRequest& from);
  void MergeFrom(const VersionEditSyncRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionEditSyncRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "version_edit_sync.VersionEditSyncRequest";
  }
  protected:
  explicit VersionEditSyncRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_version_5fedit_5fsync_2eproto);
    return ::descriptor_table_version_5fedit_5fsync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEditJsonFieldNumber = 1,
    kEditFieldNumber = 2,
  };
  // string edit_json = 1;
  void clear_edit_json();
  const std::string& edit_json() const;
  void set_edit_json(const std::string& value);
  void set_edit_json(std::string&& value);
  void set_edit_json(const char* value);
  void set_edit_json(const char* value, size_t size);
  std::string* mutable_edit_json();
  std::string* release_edit_json();
  void set_allocated_edit_json(std::string* edit_json);
  private:
  const std::string& _internal_edit_json() const;
  void _internal_set_edit_json(const std::string& value);
  std::string* _internal_mutable_edit_json();
  public:

  // .version_edit_sync.VersionEditToSync edit = 2;
  bool has_edit() const;
  private:
  bool _internal_has_edit() const;
  public:
  void clear_edit();
  const ::version_edit_sync::VersionEditToSync& edit() const;
  ::version_edit_sync::VersionEditToSync* release_edit();
  ::version_edit_sync::VersionEditToSync* mutable_edit();
  void set_allocated_edit(::version_edit_sync::VersionEditToSync* edit);
  private:
  const ::version_edit_sync::VersionEditToSync& _internal_edit() const;
  ::version_edit_sync::VersionEditToSync* _internal_mutable_edit();
  public:
  void unsafe_arena_set_allocated_edit(
      ::version_edit_sync::VersionEditToSync* edit);
  ::version_edit_sync::VersionEditToSync* unsafe_arena_release_edit();

  // @@protoc_insertion_point(class_scope:version_edit_sync.VersionEditSyncRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr edit_json_;
  ::version_edit_sync::VersionEditToSync* edit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_version_5fedit_5fsync_2eproto;
};
// -------------------------------------------------------------------

class VersionEditToSync PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:version_edit_sync.VersionEditToSync) */ {
 public:
  inline VersionEditToSync() : VersionEditToSync(nullptr) {}
  virtual ~VersionEditToSync();

  VersionEditToSync(const VersionEditToSync& from);
  VersionEditToSync(VersionEditToSync&& from) noexcept
    : VersionEditToSync() {
    *this = ::std::move(from);
  }

  inline VersionEditToSync& operator=(const VersionEditToSync& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionEditToSync& operator=(VersionEditToSync&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VersionEditToSync& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VersionEditToSync* internal_default_instance() {
    return reinterpret_cast<const VersionEditToSync*>(
               &_VersionEditToSync_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VersionEditToSync& a, VersionEditToSync& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionEditToSync* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionEditToSync* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VersionEditToSync* New() const final {
    return CreateMaybeMessage<VersionEditToSync>(nullptr);
  }

  VersionEditToSync* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VersionEditToSync>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VersionEditToSync& from);
  void MergeFrom(const VersionEditToSync& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionEditToSync* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "version_edit_sync.VersionEditToSync";
  }
  protected:
  explicit VersionEditToSync(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_version_5fedit_5fsync_2eproto);
    return ::descriptor_table_version_5fedit_5fsync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewFieldNumber = 3,
    kDelFieldNumber = 4,
    kPrevLogNumberFieldNumber = 1,
    kLogNumberFieldNumber = 2,
    kColumnFamilyFieldNumber = 5,
  };
  // repeated .version_edit_sync.NewFile new = 3;
  int new__size() const;
  private:
  int _internal_new__size() const;
  public:
  void clear_new_();
  ::version_edit_sync::NewFile* mutable_new_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::version_edit_sync::NewFile >*
      mutable_new_();
  private:
  const ::version_edit_sync::NewFile& _internal_new_(int index) const;
  ::version_edit_sync::NewFile* _internal_add_new_();
  public:
  const ::version_edit_sync::NewFile& new_(int index) const;
  ::version_edit_sync::NewFile* add_new_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::version_edit_sync::NewFile >&
      new_() const;

  // repeated .version_edit_sync.DeleteFile del = 4;
  int del_size() const;
  private:
  int _internal_del_size() const;
  public:
  void clear_del();
  ::version_edit_sync::DeleteFile* mutable_del(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::version_edit_sync::DeleteFile >*
      mutable_del();
  private:
  const ::version_edit_sync::DeleteFile& _internal_del(int index) const;
  ::version_edit_sync::DeleteFile* _internal_add_del();
  public:
  const ::version_edit_sync::DeleteFile& del(int index) const;
  ::version_edit_sync::DeleteFile* add_del();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::version_edit_sync::DeleteFile >&
      del() const;

  // uint64 prev_log_number = 1;
  void clear_prev_log_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 prev_log_number() const;
  void set_prev_log_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_prev_log_number() const;
  void _internal_set_prev_log_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 log_number = 2;
  void clear_log_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 log_number() const;
  void set_log_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_log_number() const;
  void _internal_set_log_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 column_family = 5;
  void clear_column_family();
  ::PROTOBUF_NAMESPACE_ID::uint32 column_family() const;
  void set_column_family(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column_family() const;
  void _internal_set_column_family(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:version_edit_sync.VersionEditToSync)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::version_edit_sync::NewFile > new__;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::version_edit_sync::DeleteFile > del_;
  ::PROTOBUF_NAMESPACE_ID::uint64 prev_log_number_;
  ::PROTOBUF_NAMESPACE_ID::uint64 log_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 column_family_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_version_5fedit_5fsync_2eproto;
};
// -------------------------------------------------------------------

class NewFile_FileMetaData_FileDescriptor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:version_edit_sync.NewFile.FileMetaData.FileDescriptor) */ {
 public:
  inline NewFile_FileMetaData_FileDescriptor() : NewFile_FileMetaData_FileDescriptor(nullptr) {}
  virtual ~NewFile_FileMetaData_FileDescriptor();

  NewFile_FileMetaData_FileDescriptor(const NewFile_FileMetaData_FileDescriptor& from);
  NewFile_FileMetaData_FileDescriptor(NewFile_FileMetaData_FileDescriptor&& from) noexcept
    : NewFile_FileMetaData_FileDescriptor() {
    *this = ::std::move(from);
  }

  inline NewFile_FileMetaData_FileDescriptor& operator=(const NewFile_FileMetaData_FileDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewFile_FileMetaData_FileDescriptor& operator=(NewFile_FileMetaData_FileDescriptor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewFile_FileMetaData_FileDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewFile_FileMetaData_FileDescriptor* internal_default_instance() {
    return reinterpret_cast<const NewFile_FileMetaData_FileDescriptor*>(
               &_NewFile_FileMetaData_FileDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NewFile_FileMetaData_FileDescriptor& a, NewFile_FileMetaData_FileDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(NewFile_FileMetaData_FileDescriptor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewFile_FileMetaData_FileDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewFile_FileMetaData_FileDescriptor* New() const final {
    return CreateMaybeMessage<NewFile_FileMetaData_FileDescriptor>(nullptr);
  }

  NewFile_FileMetaData_FileDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewFile_FileMetaData_FileDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewFile_FileMetaData_FileDescriptor& from);
  void MergeFrom(const NewFile_FileMetaData_FileDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewFile_FileMetaData_FileDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "version_edit_sync.NewFile.FileMetaData.FileDescriptor";
  }
  protected:
  explicit NewFile_FileMetaData_FileDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_version_5fedit_5fsync_2eproto);
    return ::descriptor_table_version_5fedit_5fsync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNumberFieldNumber = 1,
    kFileSizeFieldNumber = 2,
    kSmallestSeqnoFieldNumber = 3,
    kLargestSeqnoFieldNumber = 4,
  };
  // uint64 file_number = 1;
  void clear_file_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 file_number() const;
  void set_file_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_file_number() const;
  void _internal_set_file_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 file_size = 2;
  void clear_file_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_file_size() const;
  void _internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 smallest_seqno = 3;
  void clear_smallest_seqno();
  ::PROTOBUF_NAMESPACE_ID::uint64 smallest_seqno() const;
  void set_smallest_seqno(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_smallest_seqno() const;
  void _internal_set_smallest_seqno(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 largest_seqno = 4;
  void clear_largest_seqno();
  ::PROTOBUF_NAMESPACE_ID::uint64 largest_seqno() const;
  void set_largest_seqno(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_largest_seqno() const;
  void _internal_set_largest_seqno(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:version_edit_sync.NewFile.FileMetaData.FileDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_number_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 smallest_seqno_;
  ::PROTOBUF_NAMESPACE_ID::uint64 largest_seqno_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_version_5fedit_5fsync_2eproto;
};
// -------------------------------------------------------------------

class NewFile_FileMetaData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:version_edit_sync.NewFile.FileMetaData) */ {
 public:
  inline NewFile_FileMetaData() : NewFile_FileMetaData(nullptr) {}
  virtual ~NewFile_FileMetaData();

  NewFile_FileMetaData(const NewFile_FileMetaData& from);
  NewFile_FileMetaData(NewFile_FileMetaData&& from) noexcept
    : NewFile_FileMetaData() {
    *this = ::std::move(from);
  }

  inline NewFile_FileMetaData& operator=(const NewFile_FileMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewFile_FileMetaData& operator=(NewFile_FileMetaData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewFile_FileMetaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewFile_FileMetaData* internal_default_instance() {
    return reinterpret_cast<const NewFile_FileMetaData*>(
               &_NewFile_FileMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NewFile_FileMetaData& a, NewFile_FileMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(NewFile_FileMetaData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewFile_FileMetaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewFile_FileMetaData* New() const final {
    return CreateMaybeMessage<NewFile_FileMetaData>(nullptr);
  }

  NewFile_FileMetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewFile_FileMetaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewFile_FileMetaData& from);
  void MergeFrom(const NewFile_FileMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewFile_FileMetaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "version_edit_sync.NewFile.FileMetaData";
  }
  protected:
  explicit NewFile_FileMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_version_5fedit_5fsync_2eproto);
    return ::descriptor_table_version_5fedit_5fsync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef NewFile_FileMetaData_FileDescriptor FileDescriptor;

  // accessors -------------------------------------------------------

  enum : int {
    kSmallestKeyFieldNumber = 2,
    kLargestKeyFieldNumber = 3,
    kFileChecksumFieldNumber = 6,
    kFileChecksumFuncNameFieldNumber = 7,
    kFdFieldNumber = 1,
    kOldestAncestorTimeFieldNumber = 4,
    kFileCreationTimeFieldNumber = 5,
  };
  // string smallest_key = 2;
  void clear_smallest_key();
  const std::string& smallest_key() const;
  void set_smallest_key(const std::string& value);
  void set_smallest_key(std::string&& value);
  void set_smallest_key(const char* value);
  void set_smallest_key(const char* value, size_t size);
  std::string* mutable_smallest_key();
  std::string* release_smallest_key();
  void set_allocated_smallest_key(std::string* smallest_key);
  private:
  const std::string& _internal_smallest_key() const;
  void _internal_set_smallest_key(const std::string& value);
  std::string* _internal_mutable_smallest_key();
  public:

  // string largest_key = 3;
  void clear_largest_key();
  const std::string& largest_key() const;
  void set_largest_key(const std::string& value);
  void set_largest_key(std::string&& value);
  void set_largest_key(const char* value);
  void set_largest_key(const char* value, size_t size);
  std::string* mutable_largest_key();
  std::string* release_largest_key();
  void set_allocated_largest_key(std::string* largest_key);
  private:
  const std::string& _internal_largest_key() const;
  void _internal_set_largest_key(const std::string& value);
  std::string* _internal_mutable_largest_key();
  public:

  // string file_checksum = 6;
  void clear_file_checksum();
  const std::string& file_checksum() const;
  void set_file_checksum(const std::string& value);
  void set_file_checksum(std::string&& value);
  void set_file_checksum(const char* value);
  void set_file_checksum(const char* value, size_t size);
  std::string* mutable_file_checksum();
  std::string* release_file_checksum();
  void set_allocated_file_checksum(std::string* file_checksum);
  private:
  const std::string& _internal_file_checksum() const;
  void _internal_set_file_checksum(const std::string& value);
  std::string* _internal_mutable_file_checksum();
  public:

  // string file_checksum_func_name = 7;
  void clear_file_checksum_func_name();
  const std::string& file_checksum_func_name() const;
  void set_file_checksum_func_name(const std::string& value);
  void set_file_checksum_func_name(std::string&& value);
  void set_file_checksum_func_name(const char* value);
  void set_file_checksum_func_name(const char* value, size_t size);
  std::string* mutable_file_checksum_func_name();
  std::string* release_file_checksum_func_name();
  void set_allocated_file_checksum_func_name(std::string* file_checksum_func_name);
  private:
  const std::string& _internal_file_checksum_func_name() const;
  void _internal_set_file_checksum_func_name(const std::string& value);
  std::string* _internal_mutable_file_checksum_func_name();
  public:

  // .version_edit_sync.NewFile.FileMetaData.FileDescriptor fd = 1;
  bool has_fd() const;
  private:
  bool _internal_has_fd() const;
  public:
  void clear_fd();
  const ::version_edit_sync::NewFile_FileMetaData_FileDescriptor& fd() const;
  ::version_edit_sync::NewFile_FileMetaData_FileDescriptor* release_fd();
  ::version_edit_sync::NewFile_FileMetaData_FileDescriptor* mutable_fd();
  void set_allocated_fd(::version_edit_sync::NewFile_FileMetaData_FileDescriptor* fd);
  private:
  const ::version_edit_sync::NewFile_FileMetaData_FileDescriptor& _internal_fd() const;
  ::version_edit_sync::NewFile_FileMetaData_FileDescriptor* _internal_mutable_fd();
  public:
  void unsafe_arena_set_allocated_fd(
      ::version_edit_sync::NewFile_FileMetaData_FileDescriptor* fd);
  ::version_edit_sync::NewFile_FileMetaData_FileDescriptor* unsafe_arena_release_fd();

  // uint64 oldest_ancestor_time = 4;
  void clear_oldest_ancestor_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 oldest_ancestor_time() const;
  void set_oldest_ancestor_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_oldest_ancestor_time() const;
  void _internal_set_oldest_ancestor_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 file_creation_time = 5;
  void clear_file_creation_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 file_creation_time() const;
  void set_file_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_file_creation_time() const;
  void _internal_set_file_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:version_edit_sync.NewFile.FileMetaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr smallest_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr largest_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_checksum_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_checksum_func_name_;
  ::version_edit_sync::NewFile_FileMetaData_FileDescriptor* fd_;
  ::PROTOBUF_NAMESPACE_ID::uint64 oldest_ancestor_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_creation_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_version_5fedit_5fsync_2eproto;
};
// -------------------------------------------------------------------

class NewFile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:version_edit_sync.NewFile) */ {
 public:
  inline NewFile() : NewFile(nullptr) {}
  virtual ~NewFile();

  NewFile(const NewFile& from);
  NewFile(NewFile&& from) noexcept
    : NewFile() {
    *this = ::std::move(from);
  }

  inline NewFile& operator=(const NewFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewFile& operator=(NewFile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewFile* internal_default_instance() {
    return reinterpret_cast<const NewFile*>(
               &_NewFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NewFile& a, NewFile& b) {
    a.Swap(&b);
  }
  inline void Swap(NewFile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewFile* New() const final {
    return CreateMaybeMessage<NewFile>(nullptr);
  }

  NewFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewFile& from);
  void MergeFrom(const NewFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "version_edit_sync.NewFile";
  }
  protected:
  explicit NewFile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_version_5fedit_5fsync_2eproto);
    return ::descriptor_table_version_5fedit_5fsync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef NewFile_FileMetaData FileMetaData;

  // accessors -------------------------------------------------------

  enum : int {
    kMetaFieldNumber = 2,
    kLevelFieldNumber = 1,
  };
  // .version_edit_sync.NewFile.FileMetaData meta = 2;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::version_edit_sync::NewFile_FileMetaData& meta() const;
  ::version_edit_sync::NewFile_FileMetaData* release_meta();
  ::version_edit_sync::NewFile_FileMetaData* mutable_meta();
  void set_allocated_meta(::version_edit_sync::NewFile_FileMetaData* meta);
  private:
  const ::version_edit_sync::NewFile_FileMetaData& _internal_meta() const;
  ::version_edit_sync::NewFile_FileMetaData* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::version_edit_sync::NewFile_FileMetaData* meta);
  ::version_edit_sync::NewFile_FileMetaData* unsafe_arena_release_meta();

  // int32 level = 1;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:version_edit_sync.NewFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::version_edit_sync::NewFile_FileMetaData* meta_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_version_5fedit_5fsync_2eproto;
};
// -------------------------------------------------------------------

class DeleteFile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:version_edit_sync.DeleteFile) */ {
 public:
  inline DeleteFile() : DeleteFile(nullptr) {}
  virtual ~DeleteFile();

  DeleteFile(const DeleteFile& from);
  DeleteFile(DeleteFile&& from) noexcept
    : DeleteFile() {
    *this = ::std::move(from);
  }

  inline DeleteFile& operator=(const DeleteFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteFile& operator=(DeleteFile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteFile* internal_default_instance() {
    return reinterpret_cast<const DeleteFile*>(
               &_DeleteFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeleteFile& a, DeleteFile& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteFile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteFile* New() const final {
    return CreateMaybeMessage<DeleteFile>(nullptr);
  }

  DeleteFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteFile& from);
  void MergeFrom(const DeleteFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "version_edit_sync.DeleteFile";
  }
  protected:
  explicit DeleteFile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_version_5fedit_5fsync_2eproto);
    return ::descriptor_table_version_5fedit_5fsync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNumberFieldNumber = 2,
    kLevelFieldNumber = 1,
  };
  // uint64 file_number = 2;
  void clear_file_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 file_number() const;
  void set_file_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_file_number() const;
  void _internal_set_file_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 level = 1;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:version_edit_sync.DeleteFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_version_5fedit_5fsync_2eproto;
};
// -------------------------------------------------------------------

class VersionEditSyncReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:version_edit_sync.VersionEditSyncReply) */ {
 public:
  inline VersionEditSyncReply() : VersionEditSyncReply(nullptr) {}
  virtual ~VersionEditSyncReply();

  VersionEditSyncReply(const VersionEditSyncReply& from);
  VersionEditSyncReply(VersionEditSyncReply&& from) noexcept
    : VersionEditSyncReply() {
    *this = ::std::move(from);
  }

  inline VersionEditSyncReply& operator=(const VersionEditSyncReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionEditSyncReply& operator=(VersionEditSyncReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VersionEditSyncReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VersionEditSyncReply* internal_default_instance() {
    return reinterpret_cast<const VersionEditSyncReply*>(
               &_VersionEditSyncReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(VersionEditSyncReply& a, VersionEditSyncReply& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionEditSyncReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionEditSyncReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VersionEditSyncReply* New() const final {
    return CreateMaybeMessage<VersionEditSyncReply>(nullptr);
  }

  VersionEditSyncReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VersionEditSyncReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VersionEditSyncReply& from);
  void MergeFrom(const VersionEditSyncReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionEditSyncReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "version_edit_sync.VersionEditSyncReply";
  }
  protected:
  explicit VersionEditSyncReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_version_5fedit_5fsync_2eproto);
    return ::descriptor_table_version_5fedit_5fsync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:version_edit_sync.VersionEditSyncReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_version_5fedit_5fsync_2eproto;
};
// -------------------------------------------------------------------

class GetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:version_edit_sync.GetRequest) */ {
 public:
  inline GetRequest() : GetRequest(nullptr) {}
  virtual ~GetRequest();

  GetRequest(const GetRequest& from);
  GetRequest(GetRequest&& from) noexcept
    : GetRequest() {
    *this = ::std::move(from);
  }

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRequest& operator=(GetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRequest* internal_default_instance() {
    return reinterpret_cast<const GetRequest*>(
               &_GetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetRequest& a, GetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRequest* New() const final {
    return CreateMaybeMessage<GetRequest>(nullptr);
  }

  GetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRequest& from);
  void MergeFrom(const GetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "version_edit_sync.GetRequest";
  }
  protected:
  explicit GetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_version_5fedit_5fsync_2eproto);
    return ::descriptor_table_version_5fedit_5fsync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:version_edit_sync.GetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_version_5fedit_5fsync_2eproto;
};
// -------------------------------------------------------------------

class GetReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:version_edit_sync.GetReply) */ {
 public:
  inline GetReply() : GetReply(nullptr) {}
  virtual ~GetReply();

  GetReply(const GetReply& from);
  GetReply(GetReply&& from) noexcept
    : GetReply() {
    *this = ::std::move(from);
  }

  inline GetReply& operator=(const GetReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetReply& operator=(GetReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetReply* internal_default_instance() {
    return reinterpret_cast<const GetReply*>(
               &_GetReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetReply& a, GetReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetReply* New() const final {
    return CreateMaybeMessage<GetReply>(nullptr);
  }

  GetReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetReply& from);
  void MergeFrom(const GetReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "version_edit_sync.GetReply";
  }
  protected:
  explicit GetReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_version_5fedit_5fsync_2eproto);
    return ::descriptor_table_version_5fedit_5fsync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kValueFieldNumber = 3,
    kOkFieldNumber = 1,
  };
  // string status = 2;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:version_edit_sync.GetReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  bool ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_version_5fedit_5fsync_2eproto;
};
// -------------------------------------------------------------------

class PutRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:version_edit_sync.PutRequest) */ {
 public:
  inline PutRequest() : PutRequest(nullptr) {}
  virtual ~PutRequest();

  PutRequest(const PutRequest& from);
  PutRequest(PutRequest&& from) noexcept
    : PutRequest() {
    *this = ::std::move(from);
  }

  inline PutRequest& operator=(const PutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutRequest& operator=(PutRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutRequest* internal_default_instance() {
    return reinterpret_cast<const PutRequest*>(
               &_PutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PutRequest& a, PutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PutRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutRequest* New() const final {
    return CreateMaybeMessage<PutRequest>(nullptr);
  }

  PutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutRequest& from);
  void MergeFrom(const PutRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "version_edit_sync.PutRequest";
  }
  protected:
  explicit PutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_version_5fedit_5fsync_2eproto);
    return ::descriptor_table_version_5fedit_5fsync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:version_edit_sync.PutRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_version_5fedit_5fsync_2eproto;
};
// -------------------------------------------------------------------

class PutReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:version_edit_sync.PutReply) */ {
 public:
  inline PutReply() : PutReply(nullptr) {}
  virtual ~PutReply();

  PutReply(const PutReply& from);
  PutReply(PutReply&& from) noexcept
    : PutReply() {
    *this = ::std::move(from);
  }

  inline PutReply& operator=(const PutReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutReply& operator=(PutReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutReply* internal_default_instance() {
    return reinterpret_cast<const PutReply*>(
               &_PutReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PutReply& a, PutReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PutReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutReply* New() const final {
    return CreateMaybeMessage<PutReply>(nullptr);
  }

  PutReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutReply& from);
  void MergeFrom(const PutReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "version_edit_sync.PutReply";
  }
  protected:
  explicit PutReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_version_5fedit_5fsync_2eproto);
    return ::descriptor_table_version_5fedit_5fsync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kOkFieldNumber = 1,
  };
  // string status = 2;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:version_edit_sync.PutReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  bool ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_version_5fedit_5fsync_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VersionEditSyncRequest

// string edit_json = 1;
inline void VersionEditSyncRequest::clear_edit_json() {
  edit_json_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VersionEditSyncRequest::edit_json() const {
  // @@protoc_insertion_point(field_get:version_edit_sync.VersionEditSyncRequest.edit_json)
  return _internal_edit_json();
}
inline void VersionEditSyncRequest::set_edit_json(const std::string& value) {
  _internal_set_edit_json(value);
  // @@protoc_insertion_point(field_set:version_edit_sync.VersionEditSyncRequest.edit_json)
}
inline std::string* VersionEditSyncRequest::mutable_edit_json() {
  // @@protoc_insertion_point(field_mutable:version_edit_sync.VersionEditSyncRequest.edit_json)
  return _internal_mutable_edit_json();
}
inline const std::string& VersionEditSyncRequest::_internal_edit_json() const {
  return edit_json_.Get();
}
inline void VersionEditSyncRequest::_internal_set_edit_json(const std::string& value) {
  
  edit_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VersionEditSyncRequest::set_edit_json(std::string&& value) {
  
  edit_json_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:version_edit_sync.VersionEditSyncRequest.edit_json)
}
inline void VersionEditSyncRequest::set_edit_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  edit_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:version_edit_sync.VersionEditSyncRequest.edit_json)
}
inline void VersionEditSyncRequest::set_edit_json(const char* value,
    size_t size) {
  
  edit_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:version_edit_sync.VersionEditSyncRequest.edit_json)
}
inline std::string* VersionEditSyncRequest::_internal_mutable_edit_json() {
  
  return edit_json_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VersionEditSyncRequest::release_edit_json() {
  // @@protoc_insertion_point(field_release:version_edit_sync.VersionEditSyncRequest.edit_json)
  return edit_json_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VersionEditSyncRequest::set_allocated_edit_json(std::string* edit_json) {
  if (edit_json != nullptr) {
    
  } else {
    
  }
  edit_json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), edit_json,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:version_edit_sync.VersionEditSyncRequest.edit_json)
}

// .version_edit_sync.VersionEditToSync edit = 2;
inline bool VersionEditSyncRequest::_internal_has_edit() const {
  return this != internal_default_instance() && edit_ != nullptr;
}
inline bool VersionEditSyncRequest::has_edit() const {
  return _internal_has_edit();
}
inline void VersionEditSyncRequest::clear_edit() {
  if (GetArena() == nullptr && edit_ != nullptr) {
    delete edit_;
  }
  edit_ = nullptr;
}
inline const ::version_edit_sync::VersionEditToSync& VersionEditSyncRequest::_internal_edit() const {
  const ::version_edit_sync::VersionEditToSync* p = edit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::version_edit_sync::VersionEditToSync*>(
      &::version_edit_sync::_VersionEditToSync_default_instance_);
}
inline const ::version_edit_sync::VersionEditToSync& VersionEditSyncRequest::edit() const {
  // @@protoc_insertion_point(field_get:version_edit_sync.VersionEditSyncRequest.edit)
  return _internal_edit();
}
inline void VersionEditSyncRequest::unsafe_arena_set_allocated_edit(
    ::version_edit_sync::VersionEditToSync* edit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edit_);
  }
  edit_ = edit;
  if (edit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:version_edit_sync.VersionEditSyncRequest.edit)
}
inline ::version_edit_sync::VersionEditToSync* VersionEditSyncRequest::release_edit() {
  
  ::version_edit_sync::VersionEditToSync* temp = edit_;
  edit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::version_edit_sync::VersionEditToSync* VersionEditSyncRequest::unsafe_arena_release_edit() {
  // @@protoc_insertion_point(field_release:version_edit_sync.VersionEditSyncRequest.edit)
  
  ::version_edit_sync::VersionEditToSync* temp = edit_;
  edit_ = nullptr;
  return temp;
}
inline ::version_edit_sync::VersionEditToSync* VersionEditSyncRequest::_internal_mutable_edit() {
  
  if (edit_ == nullptr) {
    auto* p = CreateMaybeMessage<::version_edit_sync::VersionEditToSync>(GetArena());
    edit_ = p;
  }
  return edit_;
}
inline ::version_edit_sync::VersionEditToSync* VersionEditSyncRequest::mutable_edit() {
  // @@protoc_insertion_point(field_mutable:version_edit_sync.VersionEditSyncRequest.edit)
  return _internal_mutable_edit();
}
inline void VersionEditSyncRequest::set_allocated_edit(::version_edit_sync::VersionEditToSync* edit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete edit_;
  }
  if (edit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(edit);
    if (message_arena != submessage_arena) {
      edit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edit, submessage_arena);
    }
    
  } else {
    
  }
  edit_ = edit;
  // @@protoc_insertion_point(field_set_allocated:version_edit_sync.VersionEditSyncRequest.edit)
}

// -------------------------------------------------------------------

// VersionEditToSync

// uint64 prev_log_number = 1;
inline void VersionEditToSync::clear_prev_log_number() {
  prev_log_number_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VersionEditToSync::_internal_prev_log_number() const {
  return prev_log_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VersionEditToSync::prev_log_number() const {
  // @@protoc_insertion_point(field_get:version_edit_sync.VersionEditToSync.prev_log_number)
  return _internal_prev_log_number();
}
inline void VersionEditToSync::_internal_set_prev_log_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  prev_log_number_ = value;
}
inline void VersionEditToSync::set_prev_log_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_prev_log_number(value);
  // @@protoc_insertion_point(field_set:version_edit_sync.VersionEditToSync.prev_log_number)
}

// uint64 log_number = 2;
inline void VersionEditToSync::clear_log_number() {
  log_number_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VersionEditToSync::_internal_log_number() const {
  return log_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VersionEditToSync::log_number() const {
  // @@protoc_insertion_point(field_get:version_edit_sync.VersionEditToSync.log_number)
  return _internal_log_number();
}
inline void VersionEditToSync::_internal_set_log_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  log_number_ = value;
}
inline void VersionEditToSync::set_log_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_log_number(value);
  // @@protoc_insertion_point(field_set:version_edit_sync.VersionEditToSync.log_number)
}

// repeated .version_edit_sync.NewFile new = 3;
inline int VersionEditToSync::_internal_new__size() const {
  return new__.size();
}
inline int VersionEditToSync::new__size() const {
  return _internal_new__size();
}
inline void VersionEditToSync::clear_new_() {
  new__.Clear();
}
inline ::version_edit_sync::NewFile* VersionEditToSync::mutable_new_(int index) {
  // @@protoc_insertion_point(field_mutable:version_edit_sync.VersionEditToSync.new)
  return new__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::version_edit_sync::NewFile >*
VersionEditToSync::mutable_new_() {
  // @@protoc_insertion_point(field_mutable_list:version_edit_sync.VersionEditToSync.new)
  return &new__;
}
inline const ::version_edit_sync::NewFile& VersionEditToSync::_internal_new_(int index) const {
  return new__.Get(index);
}
inline const ::version_edit_sync::NewFile& VersionEditToSync::new_(int index) const {
  // @@protoc_insertion_point(field_get:version_edit_sync.VersionEditToSync.new)
  return _internal_new_(index);
}
inline ::version_edit_sync::NewFile* VersionEditToSync::_internal_add_new_() {
  return new__.Add();
}
inline ::version_edit_sync::NewFile* VersionEditToSync::add_new_() {
  // @@protoc_insertion_point(field_add:version_edit_sync.VersionEditToSync.new)
  return _internal_add_new_();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::version_edit_sync::NewFile >&
VersionEditToSync::new_() const {
  // @@protoc_insertion_point(field_list:version_edit_sync.VersionEditToSync.new)
  return new__;
}

// repeated .version_edit_sync.DeleteFile del = 4;
inline int VersionEditToSync::_internal_del_size() const {
  return del_.size();
}
inline int VersionEditToSync::del_size() const {
  return _internal_del_size();
}
inline void VersionEditToSync::clear_del() {
  del_.Clear();
}
inline ::version_edit_sync::DeleteFile* VersionEditToSync::mutable_del(int index) {
  // @@protoc_insertion_point(field_mutable:version_edit_sync.VersionEditToSync.del)
  return del_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::version_edit_sync::DeleteFile >*
VersionEditToSync::mutable_del() {
  // @@protoc_insertion_point(field_mutable_list:version_edit_sync.VersionEditToSync.del)
  return &del_;
}
inline const ::version_edit_sync::DeleteFile& VersionEditToSync::_internal_del(int index) const {
  return del_.Get(index);
}
inline const ::version_edit_sync::DeleteFile& VersionEditToSync::del(int index) const {
  // @@protoc_insertion_point(field_get:version_edit_sync.VersionEditToSync.del)
  return _internal_del(index);
}
inline ::version_edit_sync::DeleteFile* VersionEditToSync::_internal_add_del() {
  return del_.Add();
}
inline ::version_edit_sync::DeleteFile* VersionEditToSync::add_del() {
  // @@protoc_insertion_point(field_add:version_edit_sync.VersionEditToSync.del)
  return _internal_add_del();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::version_edit_sync::DeleteFile >&
VersionEditToSync::del() const {
  // @@protoc_insertion_point(field_list:version_edit_sync.VersionEditToSync.del)
  return del_;
}

// uint32 column_family = 5;
inline void VersionEditToSync::clear_column_family() {
  column_family_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VersionEditToSync::_internal_column_family() const {
  return column_family_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VersionEditToSync::column_family() const {
  // @@protoc_insertion_point(field_get:version_edit_sync.VersionEditToSync.column_family)
  return _internal_column_family();
}
inline void VersionEditToSync::_internal_set_column_family(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  column_family_ = value;
}
inline void VersionEditToSync::set_column_family(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_column_family(value);
  // @@protoc_insertion_point(field_set:version_edit_sync.VersionEditToSync.column_family)
}

// -------------------------------------------------------------------

// NewFile_FileMetaData_FileDescriptor

// uint64 file_number = 1;
inline void NewFile_FileMetaData_FileDescriptor::clear_file_number() {
  file_number_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewFile_FileMetaData_FileDescriptor::_internal_file_number() const {
  return file_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewFile_FileMetaData_FileDescriptor::file_number() const {
  // @@protoc_insertion_point(field_get:version_edit_sync.NewFile.FileMetaData.FileDescriptor.file_number)
  return _internal_file_number();
}
inline void NewFile_FileMetaData_FileDescriptor::_internal_set_file_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_number_ = value;
}
inline void NewFile_FileMetaData_FileDescriptor::set_file_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_file_number(value);
  // @@protoc_insertion_point(field_set:version_edit_sync.NewFile.FileMetaData.FileDescriptor.file_number)
}

// uint64 file_size = 2;
inline void NewFile_FileMetaData_FileDescriptor::clear_file_size() {
  file_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewFile_FileMetaData_FileDescriptor::_internal_file_size() const {
  return file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewFile_FileMetaData_FileDescriptor::file_size() const {
  // @@protoc_insertion_point(field_get:version_edit_sync.NewFile.FileMetaData.FileDescriptor.file_size)
  return _internal_file_size();
}
inline void NewFile_FileMetaData_FileDescriptor::_internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_size_ = value;
}
inline void NewFile_FileMetaData_FileDescriptor::set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:version_edit_sync.NewFile.FileMetaData.FileDescriptor.file_size)
}

// uint64 smallest_seqno = 3;
inline void NewFile_FileMetaData_FileDescriptor::clear_smallest_seqno() {
  smallest_seqno_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewFile_FileMetaData_FileDescriptor::_internal_smallest_seqno() const {
  return smallest_seqno_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewFile_FileMetaData_FileDescriptor::smallest_seqno() const {
  // @@protoc_insertion_point(field_get:version_edit_sync.NewFile.FileMetaData.FileDescriptor.smallest_seqno)
  return _internal_smallest_seqno();
}
inline void NewFile_FileMetaData_FileDescriptor::_internal_set_smallest_seqno(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  smallest_seqno_ = value;
}
inline void NewFile_FileMetaData_FileDescriptor::set_smallest_seqno(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_smallest_seqno(value);
  // @@protoc_insertion_point(field_set:version_edit_sync.NewFile.FileMetaData.FileDescriptor.smallest_seqno)
}

// uint64 largest_seqno = 4;
inline void NewFile_FileMetaData_FileDescriptor::clear_largest_seqno() {
  largest_seqno_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewFile_FileMetaData_FileDescriptor::_internal_largest_seqno() const {
  return largest_seqno_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewFile_FileMetaData_FileDescriptor::largest_seqno() const {
  // @@protoc_insertion_point(field_get:version_edit_sync.NewFile.FileMetaData.FileDescriptor.largest_seqno)
  return _internal_largest_seqno();
}
inline void NewFile_FileMetaData_FileDescriptor::_internal_set_largest_seqno(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  largest_seqno_ = value;
}
inline void NewFile_FileMetaData_FileDescriptor::set_largest_seqno(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_largest_seqno(value);
  // @@protoc_insertion_point(field_set:version_edit_sync.NewFile.FileMetaData.FileDescriptor.largest_seqno)
}

// -------------------------------------------------------------------

// NewFile_FileMetaData

// .version_edit_sync.NewFile.FileMetaData.FileDescriptor fd = 1;
inline bool NewFile_FileMetaData::_internal_has_fd() const {
  return this != internal_default_instance() && fd_ != nullptr;
}
inline bool NewFile_FileMetaData::has_fd() const {
  return _internal_has_fd();
}
inline void NewFile_FileMetaData::clear_fd() {
  if (GetArena() == nullptr && fd_ != nullptr) {
    delete fd_;
  }
  fd_ = nullptr;
}
inline const ::version_edit_sync::NewFile_FileMetaData_FileDescriptor& NewFile_FileMetaData::_internal_fd() const {
  const ::version_edit_sync::NewFile_FileMetaData_FileDescriptor* p = fd_;
  return p != nullptr ? *p : *reinterpret_cast<const ::version_edit_sync::NewFile_FileMetaData_FileDescriptor*>(
      &::version_edit_sync::_NewFile_FileMetaData_FileDescriptor_default_instance_);
}
inline const ::version_edit_sync::NewFile_FileMetaData_FileDescriptor& NewFile_FileMetaData::fd() const {
  // @@protoc_insertion_point(field_get:version_edit_sync.NewFile.FileMetaData.fd)
  return _internal_fd();
}
inline void NewFile_FileMetaData::unsafe_arena_set_allocated_fd(
    ::version_edit_sync::NewFile_FileMetaData_FileDescriptor* fd) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fd_);
  }
  fd_ = fd;
  if (fd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:version_edit_sync.NewFile.FileMetaData.fd)
}
inline ::version_edit_sync::NewFile_FileMetaData_FileDescriptor* NewFile_FileMetaData::release_fd() {
  
  ::version_edit_sync::NewFile_FileMetaData_FileDescriptor* temp = fd_;
  fd_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::version_edit_sync::NewFile_FileMetaData_FileDescriptor* NewFile_FileMetaData::unsafe_arena_release_fd() {
  // @@protoc_insertion_point(field_release:version_edit_sync.NewFile.FileMetaData.fd)
  
  ::version_edit_sync::NewFile_FileMetaData_FileDescriptor* temp = fd_;
  fd_ = nullptr;
  return temp;
}
inline ::version_edit_sync::NewFile_FileMetaData_FileDescriptor* NewFile_FileMetaData::_internal_mutable_fd() {
  
  if (fd_ == nullptr) {
    auto* p = CreateMaybeMessage<::version_edit_sync::NewFile_FileMetaData_FileDescriptor>(GetArena());
    fd_ = p;
  }
  return fd_;
}
inline ::version_edit_sync::NewFile_FileMetaData_FileDescriptor* NewFile_FileMetaData::mutable_fd() {
  // @@protoc_insertion_point(field_mutable:version_edit_sync.NewFile.FileMetaData.fd)
  return _internal_mutable_fd();
}
inline void NewFile_FileMetaData::set_allocated_fd(::version_edit_sync::NewFile_FileMetaData_FileDescriptor* fd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fd_;
  }
  if (fd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fd);
    if (message_arena != submessage_arena) {
      fd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fd, submessage_arena);
    }
    
  } else {
    
  }
  fd_ = fd;
  // @@protoc_insertion_point(field_set_allocated:version_edit_sync.NewFile.FileMetaData.fd)
}

// string smallest_key = 2;
inline void NewFile_FileMetaData::clear_smallest_key() {
  smallest_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NewFile_FileMetaData::smallest_key() const {
  // @@protoc_insertion_point(field_get:version_edit_sync.NewFile.FileMetaData.smallest_key)
  return _internal_smallest_key();
}
inline void NewFile_FileMetaData::set_smallest_key(const std::string& value) {
  _internal_set_smallest_key(value);
  // @@protoc_insertion_point(field_set:version_edit_sync.NewFile.FileMetaData.smallest_key)
}
inline std::string* NewFile_FileMetaData::mutable_smallest_key() {
  // @@protoc_insertion_point(field_mutable:version_edit_sync.NewFile.FileMetaData.smallest_key)
  return _internal_mutable_smallest_key();
}
inline const std::string& NewFile_FileMetaData::_internal_smallest_key() const {
  return smallest_key_.Get();
}
inline void NewFile_FileMetaData::_internal_set_smallest_key(const std::string& value) {
  
  smallest_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NewFile_FileMetaData::set_smallest_key(std::string&& value) {
  
  smallest_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:version_edit_sync.NewFile.FileMetaData.smallest_key)
}
inline void NewFile_FileMetaData::set_smallest_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  smallest_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:version_edit_sync.NewFile.FileMetaData.smallest_key)
}
inline void NewFile_FileMetaData::set_smallest_key(const char* value,
    size_t size) {
  
  smallest_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:version_edit_sync.NewFile.FileMetaData.smallest_key)
}
inline std::string* NewFile_FileMetaData::_internal_mutable_smallest_key() {
  
  return smallest_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NewFile_FileMetaData::release_smallest_key() {
  // @@protoc_insertion_point(field_release:version_edit_sync.NewFile.FileMetaData.smallest_key)
  return smallest_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewFile_FileMetaData::set_allocated_smallest_key(std::string* smallest_key) {
  if (smallest_key != nullptr) {
    
  } else {
    
  }
  smallest_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), smallest_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:version_edit_sync.NewFile.FileMetaData.smallest_key)
}

// string largest_key = 3;
inline void NewFile_FileMetaData::clear_largest_key() {
  largest_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NewFile_FileMetaData::largest_key() const {
  // @@protoc_insertion_point(field_get:version_edit_sync.NewFile.FileMetaData.largest_key)
  return _internal_largest_key();
}
inline void NewFile_FileMetaData::set_largest_key(const std::string& value) {
  _internal_set_largest_key(value);
  // @@protoc_insertion_point(field_set:version_edit_sync.NewFile.FileMetaData.largest_key)
}
inline std::string* NewFile_FileMetaData::mutable_largest_key() {
  // @@protoc_insertion_point(field_mutable:version_edit_sync.NewFile.FileMetaData.largest_key)
  return _internal_mutable_largest_key();
}
inline const std::string& NewFile_FileMetaData::_internal_largest_key() const {
  return largest_key_.Get();
}
inline void NewFile_FileMetaData::_internal_set_largest_key(const std::string& value) {
  
  largest_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NewFile_FileMetaData::set_largest_key(std::string&& value) {
  
  largest_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:version_edit_sync.NewFile.FileMetaData.largest_key)
}
inline void NewFile_FileMetaData::set_largest_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  largest_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:version_edit_sync.NewFile.FileMetaData.largest_key)
}
inline void NewFile_FileMetaData::set_largest_key(const char* value,
    size_t size) {
  
  largest_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:version_edit_sync.NewFile.FileMetaData.largest_key)
}
inline std::string* NewFile_FileMetaData::_internal_mutable_largest_key() {
  
  return largest_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NewFile_FileMetaData::release_largest_key() {
  // @@protoc_insertion_point(field_release:version_edit_sync.NewFile.FileMetaData.largest_key)
  return largest_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewFile_FileMetaData::set_allocated_largest_key(std::string* largest_key) {
  if (largest_key != nullptr) {
    
  } else {
    
  }
  largest_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), largest_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:version_edit_sync.NewFile.FileMetaData.largest_key)
}

// uint64 oldest_ancestor_time = 4;
inline void NewFile_FileMetaData::clear_oldest_ancestor_time() {
  oldest_ancestor_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewFile_FileMetaData::_internal_oldest_ancestor_time() const {
  return oldest_ancestor_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewFile_FileMetaData::oldest_ancestor_time() const {
  // @@protoc_insertion_point(field_get:version_edit_sync.NewFile.FileMetaData.oldest_ancestor_time)
  return _internal_oldest_ancestor_time();
}
inline void NewFile_FileMetaData::_internal_set_oldest_ancestor_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  oldest_ancestor_time_ = value;
}
inline void NewFile_FileMetaData::set_oldest_ancestor_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_oldest_ancestor_time(value);
  // @@protoc_insertion_point(field_set:version_edit_sync.NewFile.FileMetaData.oldest_ancestor_time)
}

// uint64 file_creation_time = 5;
inline void NewFile_FileMetaData::clear_file_creation_time() {
  file_creation_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewFile_FileMetaData::_internal_file_creation_time() const {
  return file_creation_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewFile_FileMetaData::file_creation_time() const {
  // @@protoc_insertion_point(field_get:version_edit_sync.NewFile.FileMetaData.file_creation_time)
  return _internal_file_creation_time();
}
inline void NewFile_FileMetaData::_internal_set_file_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_creation_time_ = value;
}
inline void NewFile_FileMetaData::set_file_creation_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_file_creation_time(value);
  // @@protoc_insertion_point(field_set:version_edit_sync.NewFile.FileMetaData.file_creation_time)
}

// string file_checksum = 6;
inline void NewFile_FileMetaData::clear_file_checksum() {
  file_checksum_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NewFile_FileMetaData::file_checksum() const {
  // @@protoc_insertion_point(field_get:version_edit_sync.NewFile.FileMetaData.file_checksum)
  return _internal_file_checksum();
}
inline void NewFile_FileMetaData::set_file_checksum(const std::string& value) {
  _internal_set_file_checksum(value);
  // @@protoc_insertion_point(field_set:version_edit_sync.NewFile.FileMetaData.file_checksum)
}
inline std::string* NewFile_FileMetaData::mutable_file_checksum() {
  // @@protoc_insertion_point(field_mutable:version_edit_sync.NewFile.FileMetaData.file_checksum)
  return _internal_mutable_file_checksum();
}
inline const std::string& NewFile_FileMetaData::_internal_file_checksum() const {
  return file_checksum_.Get();
}
inline void NewFile_FileMetaData::_internal_set_file_checksum(const std::string& value) {
  
  file_checksum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NewFile_FileMetaData::set_file_checksum(std::string&& value) {
  
  file_checksum_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:version_edit_sync.NewFile.FileMetaData.file_checksum)
}
inline void NewFile_FileMetaData::set_file_checksum(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_checksum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:version_edit_sync.NewFile.FileMetaData.file_checksum)
}
inline void NewFile_FileMetaData::set_file_checksum(const char* value,
    size_t size) {
  
  file_checksum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:version_edit_sync.NewFile.FileMetaData.file_checksum)
}
inline std::string* NewFile_FileMetaData::_internal_mutable_file_checksum() {
  
  return file_checksum_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NewFile_FileMetaData::release_file_checksum() {
  // @@protoc_insertion_point(field_release:version_edit_sync.NewFile.FileMetaData.file_checksum)
  return file_checksum_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewFile_FileMetaData::set_allocated_file_checksum(std::string* file_checksum) {
  if (file_checksum != nullptr) {
    
  } else {
    
  }
  file_checksum_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_checksum,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:version_edit_sync.NewFile.FileMetaData.file_checksum)
}

// string file_checksum_func_name = 7;
inline void NewFile_FileMetaData::clear_file_checksum_func_name() {
  file_checksum_func_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NewFile_FileMetaData::file_checksum_func_name() const {
  // @@protoc_insertion_point(field_get:version_edit_sync.NewFile.FileMetaData.file_checksum_func_name)
  return _internal_file_checksum_func_name();
}
inline void NewFile_FileMetaData::set_file_checksum_func_name(const std::string& value) {
  _internal_set_file_checksum_func_name(value);
  // @@protoc_insertion_point(field_set:version_edit_sync.NewFile.FileMetaData.file_checksum_func_name)
}
inline std::string* NewFile_FileMetaData::mutable_file_checksum_func_name() {
  // @@protoc_insertion_point(field_mutable:version_edit_sync.NewFile.FileMetaData.file_checksum_func_name)
  return _internal_mutable_file_checksum_func_name();
}
inline const std::string& NewFile_FileMetaData::_internal_file_checksum_func_name() const {
  return file_checksum_func_name_.Get();
}
inline void NewFile_FileMetaData::_internal_set_file_checksum_func_name(const std::string& value) {
  
  file_checksum_func_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NewFile_FileMetaData::set_file_checksum_func_name(std::string&& value) {
  
  file_checksum_func_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:version_edit_sync.NewFile.FileMetaData.file_checksum_func_name)
}
inline void NewFile_FileMetaData::set_file_checksum_func_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_checksum_func_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:version_edit_sync.NewFile.FileMetaData.file_checksum_func_name)
}
inline void NewFile_FileMetaData::set_file_checksum_func_name(const char* value,
    size_t size) {
  
  file_checksum_func_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:version_edit_sync.NewFile.FileMetaData.file_checksum_func_name)
}
inline std::string* NewFile_FileMetaData::_internal_mutable_file_checksum_func_name() {
  
  return file_checksum_func_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NewFile_FileMetaData::release_file_checksum_func_name() {
  // @@protoc_insertion_point(field_release:version_edit_sync.NewFile.FileMetaData.file_checksum_func_name)
  return file_checksum_func_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewFile_FileMetaData::set_allocated_file_checksum_func_name(std::string* file_checksum_func_name) {
  if (file_checksum_func_name != nullptr) {
    
  } else {
    
  }
  file_checksum_func_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_checksum_func_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:version_edit_sync.NewFile.FileMetaData.file_checksum_func_name)
}

// -------------------------------------------------------------------

// NewFile

// int32 level = 1;
inline void NewFile::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewFile::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewFile::level() const {
  // @@protoc_insertion_point(field_get:version_edit_sync.NewFile.level)
  return _internal_level();
}
inline void NewFile::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void NewFile::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:version_edit_sync.NewFile.level)
}

// .version_edit_sync.NewFile.FileMetaData meta = 2;
inline bool NewFile::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool NewFile::has_meta() const {
  return _internal_has_meta();
}
inline void NewFile::clear_meta() {
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
inline const ::version_edit_sync::NewFile_FileMetaData& NewFile::_internal_meta() const {
  const ::version_edit_sync::NewFile_FileMetaData* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::version_edit_sync::NewFile_FileMetaData*>(
      &::version_edit_sync::_NewFile_FileMetaData_default_instance_);
}
inline const ::version_edit_sync::NewFile_FileMetaData& NewFile::meta() const {
  // @@protoc_insertion_point(field_get:version_edit_sync.NewFile.meta)
  return _internal_meta();
}
inline void NewFile::unsafe_arena_set_allocated_meta(
    ::version_edit_sync::NewFile_FileMetaData* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:version_edit_sync.NewFile.meta)
}
inline ::version_edit_sync::NewFile_FileMetaData* NewFile::release_meta() {
  
  ::version_edit_sync::NewFile_FileMetaData* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::version_edit_sync::NewFile_FileMetaData* NewFile::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:version_edit_sync.NewFile.meta)
  
  ::version_edit_sync::NewFile_FileMetaData* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::version_edit_sync::NewFile_FileMetaData* NewFile::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::version_edit_sync::NewFile_FileMetaData>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::version_edit_sync::NewFile_FileMetaData* NewFile::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:version_edit_sync.NewFile.meta)
  return _internal_mutable_meta();
}
inline void NewFile::set_allocated_meta(::version_edit_sync::NewFile_FileMetaData* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(meta);
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:version_edit_sync.NewFile.meta)
}

// -------------------------------------------------------------------

// DeleteFile

// int32 level = 1;
inline void DeleteFile::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteFile::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteFile::level() const {
  // @@protoc_insertion_point(field_get:version_edit_sync.DeleteFile.level)
  return _internal_level();
}
inline void DeleteFile::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void DeleteFile::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:version_edit_sync.DeleteFile.level)
}

// uint64 file_number = 2;
inline void DeleteFile::clear_file_number() {
  file_number_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteFile::_internal_file_number() const {
  return file_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteFile::file_number() const {
  // @@protoc_insertion_point(field_get:version_edit_sync.DeleteFile.file_number)
  return _internal_file_number();
}
inline void DeleteFile::_internal_set_file_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_number_ = value;
}
inline void DeleteFile::set_file_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_file_number(value);
  // @@protoc_insertion_point(field_set:version_edit_sync.DeleteFile.file_number)
}

// -------------------------------------------------------------------

// VersionEditSyncReply

// string message = 1;
inline void VersionEditSyncReply::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VersionEditSyncReply::message() const {
  // @@protoc_insertion_point(field_get:version_edit_sync.VersionEditSyncReply.message)
  return _internal_message();
}
inline void VersionEditSyncReply::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:version_edit_sync.VersionEditSyncReply.message)
}
inline std::string* VersionEditSyncReply::mutable_message() {
  // @@protoc_insertion_point(field_mutable:version_edit_sync.VersionEditSyncReply.message)
  return _internal_mutable_message();
}
inline const std::string& VersionEditSyncReply::_internal_message() const {
  return message_.Get();
}
inline void VersionEditSyncReply::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VersionEditSyncReply::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:version_edit_sync.VersionEditSyncReply.message)
}
inline void VersionEditSyncReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:version_edit_sync.VersionEditSyncReply.message)
}
inline void VersionEditSyncReply::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:version_edit_sync.VersionEditSyncReply.message)
}
inline std::string* VersionEditSyncReply::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VersionEditSyncReply::release_message() {
  // @@protoc_insertion_point(field_release:version_edit_sync.VersionEditSyncReply.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VersionEditSyncReply::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:version_edit_sync.VersionEditSyncReply.message)
}

// -------------------------------------------------------------------

// GetRequest

// string key = 1;
inline void GetRequest::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetRequest::key() const {
  // @@protoc_insertion_point(field_get:version_edit_sync.GetRequest.key)
  return _internal_key();
}
inline void GetRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:version_edit_sync.GetRequest.key)
}
inline std::string* GetRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:version_edit_sync.GetRequest.key)
  return _internal_mutable_key();
}
inline const std::string& GetRequest::_internal_key() const {
  return key_.Get();
}
inline void GetRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRequest::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:version_edit_sync.GetRequest.key)
}
inline void GetRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:version_edit_sync.GetRequest.key)
}
inline void GetRequest::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:version_edit_sync.GetRequest.key)
}
inline std::string* GetRequest::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRequest::release_key() {
  // @@protoc_insertion_point(field_release:version_edit_sync.GetRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:version_edit_sync.GetRequest.key)
}

// -------------------------------------------------------------------

// GetReply

// bool ok = 1;
inline void GetReply::clear_ok() {
  ok_ = false;
}
inline bool GetReply::_internal_ok() const {
  return ok_;
}
inline bool GetReply::ok() const {
  // @@protoc_insertion_point(field_get:version_edit_sync.GetReply.ok)
  return _internal_ok();
}
inline void GetReply::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void GetReply::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:version_edit_sync.GetReply.ok)
}

// string status = 2;
inline void GetReply::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetReply::status() const {
  // @@protoc_insertion_point(field_get:version_edit_sync.GetReply.status)
  return _internal_status();
}
inline void GetReply::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:version_edit_sync.GetReply.status)
}
inline std::string* GetReply::mutable_status() {
  // @@protoc_insertion_point(field_mutable:version_edit_sync.GetReply.status)
  return _internal_mutable_status();
}
inline const std::string& GetReply::_internal_status() const {
  return status_.Get();
}
inline void GetReply::_internal_set_status(const std::string& value) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetReply::set_status(std::string&& value) {
  
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:version_edit_sync.GetReply.status)
}
inline void GetReply::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:version_edit_sync.GetReply.status)
}
inline void GetReply::set_status(const char* value,
    size_t size) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:version_edit_sync.GetReply.status)
}
inline std::string* GetReply::_internal_mutable_status() {
  
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetReply::release_status() {
  // @@protoc_insertion_point(field_release:version_edit_sync.GetReply.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetReply::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:version_edit_sync.GetReply.status)
}

// string value = 3;
inline void GetReply::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetReply::value() const {
  // @@protoc_insertion_point(field_get:version_edit_sync.GetReply.value)
  return _internal_value();
}
inline void GetReply::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:version_edit_sync.GetReply.value)
}
inline std::string* GetReply::mutable_value() {
  // @@protoc_insertion_point(field_mutable:version_edit_sync.GetReply.value)
  return _internal_mutable_value();
}
inline const std::string& GetReply::_internal_value() const {
  return value_.Get();
}
inline void GetReply::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetReply::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:version_edit_sync.GetReply.value)
}
inline void GetReply::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:version_edit_sync.GetReply.value)
}
inline void GetReply::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:version_edit_sync.GetReply.value)
}
inline std::string* GetReply::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetReply::release_value() {
  // @@protoc_insertion_point(field_release:version_edit_sync.GetReply.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetReply::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:version_edit_sync.GetReply.value)
}

// -------------------------------------------------------------------

// PutRequest

// string key = 1;
inline void PutRequest::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PutRequest::key() const {
  // @@protoc_insertion_point(field_get:version_edit_sync.PutRequest.key)
  return _internal_key();
}
inline void PutRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:version_edit_sync.PutRequest.key)
}
inline std::string* PutRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:version_edit_sync.PutRequest.key)
  return _internal_mutable_key();
}
inline const std::string& PutRequest::_internal_key() const {
  return key_.Get();
}
inline void PutRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PutRequest::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:version_edit_sync.PutRequest.key)
}
inline void PutRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:version_edit_sync.PutRequest.key)
}
inline void PutRequest::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:version_edit_sync.PutRequest.key)
}
inline std::string* PutRequest::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PutRequest::release_key() {
  // @@protoc_insertion_point(field_release:version_edit_sync.PutRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PutRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:version_edit_sync.PutRequest.key)
}

// string value = 2;
inline void PutRequest::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PutRequest::value() const {
  // @@protoc_insertion_point(field_get:version_edit_sync.PutRequest.value)
  return _internal_value();
}
inline void PutRequest::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:version_edit_sync.PutRequest.value)
}
inline std::string* PutRequest::mutable_value() {
  // @@protoc_insertion_point(field_mutable:version_edit_sync.PutRequest.value)
  return _internal_mutable_value();
}
inline const std::string& PutRequest::_internal_value() const {
  return value_.Get();
}
inline void PutRequest::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PutRequest::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:version_edit_sync.PutRequest.value)
}
inline void PutRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:version_edit_sync.PutRequest.value)
}
inline void PutRequest::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:version_edit_sync.PutRequest.value)
}
inline std::string* PutRequest::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PutRequest::release_value() {
  // @@protoc_insertion_point(field_release:version_edit_sync.PutRequest.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PutRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:version_edit_sync.PutRequest.value)
}

// -------------------------------------------------------------------

// PutReply

// bool ok = 1;
inline void PutReply::clear_ok() {
  ok_ = false;
}
inline bool PutReply::_internal_ok() const {
  return ok_;
}
inline bool PutReply::ok() const {
  // @@protoc_insertion_point(field_get:version_edit_sync.PutReply.ok)
  return _internal_ok();
}
inline void PutReply::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void PutReply::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:version_edit_sync.PutReply.ok)
}

// string status = 2;
inline void PutReply::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PutReply::status() const {
  // @@protoc_insertion_point(field_get:version_edit_sync.PutReply.status)
  return _internal_status();
}
inline void PutReply::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:version_edit_sync.PutReply.status)
}
inline std::string* PutReply::mutable_status() {
  // @@protoc_insertion_point(field_mutable:version_edit_sync.PutReply.status)
  return _internal_mutable_status();
}
inline const std::string& PutReply::_internal_status() const {
  return status_.Get();
}
inline void PutReply::_internal_set_status(const std::string& value) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PutReply::set_status(std::string&& value) {
  
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:version_edit_sync.PutReply.status)
}
inline void PutReply::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:version_edit_sync.PutReply.status)
}
inline void PutReply::set_status(const char* value,
    size_t size) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:version_edit_sync.PutReply.status)
}
inline std::string* PutReply::_internal_mutable_status() {
  
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PutReply::release_status() {
  // @@protoc_insertion_point(field_release:version_edit_sync.PutReply.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PutReply::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:version_edit_sync.PutReply.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace version_edit_sync

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_version_5fedit_5fsync_2eproto
