// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: version_edit_sync.proto

#include "version_edit_sync.pb.h"
#include "version_edit_sync.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace version_edit_sync {

static const char* VersionEditSyncService_method_names[] = {
  "/version_edit_sync.VersionEditSyncService/VersionEditSync",
  "/version_edit_sync.VersionEditSyncService/Put",
  "/version_edit_sync.VersionEditSyncService/Get",
};

std::unique_ptr< VersionEditSyncService::Stub> VersionEditSyncService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< VersionEditSyncService::Stub> stub(new VersionEditSyncService::Stub(channel));
  return stub;
}

VersionEditSyncService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_VersionEditSync_(VersionEditSyncService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Put_(VersionEditSyncService_method_names[1], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_Get_(VersionEditSyncService_method_names[2], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status VersionEditSyncService::Stub::VersionEditSync(::grpc::ClientContext* context, const ::version_edit_sync::VersionEditSyncRequest& request, ::version_edit_sync::VersionEditSyncReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::version_edit_sync::VersionEditSyncRequest, ::version_edit_sync::VersionEditSyncReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_VersionEditSync_, context, request, response);
}

void VersionEditSyncService::Stub::experimental_async::VersionEditSync(::grpc::ClientContext* context, const ::version_edit_sync::VersionEditSyncRequest* request, ::version_edit_sync::VersionEditSyncReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::version_edit_sync::VersionEditSyncRequest, ::version_edit_sync::VersionEditSyncReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VersionEditSync_, context, request, response, std::move(f));
}

void VersionEditSyncService::Stub::experimental_async::VersionEditSync(::grpc::ClientContext* context, const ::version_edit_sync::VersionEditSyncRequest* request, ::version_edit_sync::VersionEditSyncReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VersionEditSync_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::version_edit_sync::VersionEditSyncReply>* VersionEditSyncService::Stub::PrepareAsyncVersionEditSyncRaw(::grpc::ClientContext* context, const ::version_edit_sync::VersionEditSyncRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::version_edit_sync::VersionEditSyncReply, ::version_edit_sync::VersionEditSyncRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_VersionEditSync_, context, request);
}

::grpc::ClientAsyncResponseReader< ::version_edit_sync::VersionEditSyncReply>* VersionEditSyncService::Stub::AsyncVersionEditSyncRaw(::grpc::ClientContext* context, const ::version_edit_sync::VersionEditSyncRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVersionEditSyncRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::version_edit_sync::PutRequest, ::version_edit_sync::PutReply>* VersionEditSyncService::Stub::PutRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::version_edit_sync::PutRequest, ::version_edit_sync::PutReply>::Create(channel_.get(), rpcmethod_Put_, context);
}

void VersionEditSyncService::Stub::experimental_async::Put(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::version_edit_sync::PutRequest,::version_edit_sync::PutReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::version_edit_sync::PutRequest,::version_edit_sync::PutReply>::Create(stub_->channel_.get(), stub_->rpcmethod_Put_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::version_edit_sync::PutRequest, ::version_edit_sync::PutReply>* VersionEditSyncService::Stub::AsyncPutRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::version_edit_sync::PutRequest, ::version_edit_sync::PutReply>::Create(channel_.get(), cq, rpcmethod_Put_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::version_edit_sync::PutRequest, ::version_edit_sync::PutReply>* VersionEditSyncService::Stub::PrepareAsyncPutRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::version_edit_sync::PutRequest, ::version_edit_sync::PutReply>::Create(channel_.get(), cq, rpcmethod_Put_, context, false, nullptr);
}

::grpc::ClientReaderWriter< ::version_edit_sync::GetRequest, ::version_edit_sync::GetReply>* VersionEditSyncService::Stub::GetRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::version_edit_sync::GetRequest, ::version_edit_sync::GetReply>::Create(channel_.get(), rpcmethod_Get_, context);
}

void VersionEditSyncService::Stub::experimental_async::Get(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::version_edit_sync::GetRequest,::version_edit_sync::GetReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::version_edit_sync::GetRequest,::version_edit_sync::GetReply>::Create(stub_->channel_.get(), stub_->rpcmethod_Get_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::version_edit_sync::GetRequest, ::version_edit_sync::GetReply>* VersionEditSyncService::Stub::AsyncGetRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::version_edit_sync::GetRequest, ::version_edit_sync::GetReply>::Create(channel_.get(), cq, rpcmethod_Get_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::version_edit_sync::GetRequest, ::version_edit_sync::GetReply>* VersionEditSyncService::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::version_edit_sync::GetRequest, ::version_edit_sync::GetReply>::Create(channel_.get(), cq, rpcmethod_Get_, context, false, nullptr);
}

VersionEditSyncService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VersionEditSyncService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VersionEditSyncService::Service, ::version_edit_sync::VersionEditSyncRequest, ::version_edit_sync::VersionEditSyncReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VersionEditSyncService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::version_edit_sync::VersionEditSyncRequest* req,
             ::version_edit_sync::VersionEditSyncReply* resp) {
               return service->VersionEditSync(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VersionEditSyncService_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< VersionEditSyncService::Service, ::version_edit_sync::PutRequest, ::version_edit_sync::PutReply>(
          [](VersionEditSyncService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::version_edit_sync::PutReply,
             ::version_edit_sync::PutRequest>* stream) {
               return service->Put(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VersionEditSyncService_method_names[2],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< VersionEditSyncService::Service, ::version_edit_sync::GetRequest, ::version_edit_sync::GetReply>(
          [](VersionEditSyncService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::version_edit_sync::GetReply,
             ::version_edit_sync::GetRequest>* stream) {
               return service->Get(ctx, stream);
             }, this)));
}

VersionEditSyncService::Service::~Service() {
}

::grpc::Status VersionEditSyncService::Service::VersionEditSync(::grpc::ServerContext* context, const ::version_edit_sync::VersionEditSyncRequest* request, ::version_edit_sync::VersionEditSyncReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VersionEditSyncService::Service::Put(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::version_edit_sync::PutReply, ::version_edit_sync::PutRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VersionEditSyncService::Service::Get(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::version_edit_sync::GetReply, ::version_edit_sync::GetRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace version_edit_sync

